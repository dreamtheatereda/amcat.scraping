# -*- coding: utf-8 -*-
from __future__ import unicode_literals, print_function, absolute_import
###########################################################################
#          (C) Vrije Universiteit, Amsterdam (the Netherlands)            #
#                                                                         #
# This file is part of AmCAT - The Amsterdam Content Analysis Toolkit     #
#                                                                         #
# AmCAT is free software: you can redistribute it and/or modify it under  #
# the terms of the GNU Affero General Public License as published by the  #
# Free Software Foundation, either version 3 of the License, or (at your  #
# option) any later version.                                              #
#                                                                         #
# AmCAT is distributed in the hope that it will be useful, but WITHOUT    #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or   #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public     #
# License for more details.                                               #
#                                                                         #
# You should have received a copy of the GNU Affero General Public        #
# License along with AmCAT.  If not, see <http://www.gnu.org/licenses/>.  #
###########################################################################

from amcatscraping.processors import HTTPScraper
from amcatscraping.objects import HTMLDocument

from amcat.tools import toolkit

import re

ARCHIVE_URL = "http://borstkankertrefpunt.web-log.nl/borstkankertrefpunt/archives.html"

REACTIES_RE = re.compile('^Reacties \((\d+)\)$')
AUTHOR_POST_RE = re.compile('Geplaatst door\s+(.+)\s+(in|\|)')
AUTHOR_COMM_RE = re.compile('Geplaatst door:\s+(.+)\s+\|')

class BorstkankerTrefpuntScraper(HTTPScraper):
    def init(self):
        """ """
        index = self.getdoc(ARCHIVE_URL)

        return (HTMLDocument(url=a.get('href')) for a in index.cssselect('div.archive-date-based li.archive-list-item a'))

    def get(self, page):
        headlines = page.doc.cssselect('#beta-inner h2')
        divisions = page.doc.cssselect('#beta-inner > div')[:-1]

        for h2, div in zip(headlines, divisions):
            post = HTMLDocument()

            try:
                post.props.date = toolkit.readDate(h2.text)
            except ValueError:
                continue

            a = div.cssselect('h3 a')[0]
            post.props.url = a.get('href')
            post.props.headline = a.text
            post.props.text = div.cssselect('div.entry-content')

            footer = div.cssselect('.entry-footer')[0].text_content().strip()
            post.props.author = AUTHOR_POST_RE.search(footer).groups()[0]

            yield post

            comms = REACTIES_RE.match(div.cssselect('.entry-comments')[0].text).groups()[0]
            if int(comms):
                commpage = self.getdoc(post.props.url)
                for div in commpage.cssselect('#comments-content > div'):
                    comm = post.copy(parent=post)
                    comm.props.text = div.cssselect('div.comment-content')[0]
                    comm.props.date = toolkit.readDate(div.cssselect('.comment-footer a')[-1].text)

                    footer = div.cssselect('.comment-footer')[0].text_content().strip()
                    comm.props.author = AUTHOR_COMM_RE.search(footer).groups()[0]
                    
                    yield comm

if __name__ == '__main__':
    from amcatscraping.manager import main
    main(BorstkankerTrefpuntScraper)
